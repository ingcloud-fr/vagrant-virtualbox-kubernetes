#!/bin/bash

set -e

function usage() {
  echo "Usage:"
  echo "  $0 up -n <cluster_name> -c <cni> -v <k8s_version> -w <workers> -m <build_mode> [-i <ubuntu_box>] [-r <runtime>] [-a <ip_start>] [--dry-run]"
  echo "  $0 destroy -n <cluster_name>"
  echo "  $0 ssh -n <cluster_name> <node> | ssh <cluster_name-node>"
  echo "  $0 list [-n <cluster_name>]"
  echo "Options:"
  echo "  -n <cluster_name>   Cluster name prefix (required for up, destroy)"
  echo "  -c <cni>            CNI plugin: cilium | flannel (default: cilium)"
  echo "  -v <k8s_version>    Kubernetes version (default: 1.32)"
  echo "  -w <workers>        Number of worker nodes (default: 1)"
  echo "  -m <build_mode>     Network mode: bridge_static | bridge_dyn | nat (default: bridge_static)"
  echo "  -i <ubuntu_box>     Ubuntu box image to use (default: jammy64-updated)"
  echo "  -r <runtime>        Container runtime: containerd | docker (default: docker)"
  echo "  -a <ip_start>       Static IP start address for bridge_static (default: 192.168.1.200)"
  echo "  --dry-run           Show the command without executing it"
  echo ""
  echo "For bridge_dyn, you have to set IPs in the Vagrantfile"
  exit 1
}

if [ $# -lt 1 ]; then
  usage
fi

COMMAND=$1
shift

CLUSTER_NAME="k8s"
CNI_PLUGIN="cilium"
K8S_VERSION="1.32"
NUM_WORKER_NODES="1"
BUILD_MODE="bridge_static"
UBUNTU_BOX="jammy64-updated"
CONTAINER_RUNTIME="docker"
BRIDGE_STATIC_IP_START="192.168.1.200"
DRY_RUN=false

# Manual parsing for long options and getopts
POSITIONAL_ARGS=()
while [[ $# -gt 0 ]]; do
  case "$1" in
    --dry-run)
      DRY_RUN=true
      shift
      ;;
    -n) CLUSTER_NAME="$2"; shift 2 ;;
    -c) CNI_PLUGIN="$2"; shift 2 ;;
    -v) K8S_VERSION="$2"; shift 2 ;;
    -w) NUM_WORKER_NODES="$2"; shift 2 ;;
    -m) BUILD_MODE="$2"; shift 2 ;;
    -i) UBUNTU_BOX="$2"; shift 2 ;;
    -r) CONTAINER_RUNTIME="$2"; shift 2 ;;
    -a) BRIDGE_STATIC_IP_START="$2"; shift 2 ;;
    *) POSITIONAL_ARGS+=("$1"); shift ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

case $COMMAND in
  up)
    echo "[+] Starting new cluster ..."
    echo "  Name (prefix): $CLUSTER_NAME"
    echo "  Mode: $BUILD_MODE"
    echo "  Kubernetes version: $K8S_VERSION"
    echo "  Workers: $NUM_WORKER_NODES"
    echo "  CNI: $CNI_PLUGIN"
    echo "  Ubuntu box: $UBUNTU_BOX"
    echo "  Container runtime: $CONTAINER_RUNTIME"
    echo "  Bridge static IP start: $BRIDGE_STATIC_IP_START"
    if $DRY_RUN; then
      echo "[DRY-RUN] Command that would be executed:"
      echo "CNI_PLUGIN=$CNI_PLUGIN K8S_VERSION=$K8S_VERSION NUM_WORKER_NODES=$NUM_WORKER_NODES BUILD_MODE=$BUILD_MODE CLUSTER_NAME=$CLUSTER_NAME UBUNTU_BOX=$UBUNTU_BOX CONTAINER_RUNTIME=$CONTAINER_RUNTIME BRIDGE_STATIC_IP_START=$BRIDGE_STATIC_IP_START vagrant up"
    else
      CNI_PLUGIN=$CNI_PLUGIN \
      K8S_VERSION=$K8S_VERSION \
      NUM_WORKER_NODES=$NUM_WORKER_NODES \
      BUILD_MODE=$BUILD_MODE \
      CLUSTER_NAME=$CLUSTER_NAME \
      UBUNTU_BOX=$UBUNTU_BOX \
      CONTAINER_RUNTIME=$CONTAINER_RUNTIME \
      BRIDGE_STATIC_IP_START=$BRIDGE_STATIC_IP_START \
      vagrant up
    fi
    ;;

  destroy)
    if [ -z "$CLUSTER_NAME" ]; then
      echo "[ERROR] Cluster name is required (-n)"
      exit 1
    fi
    echo "[-] Destroying cluster '$CLUSTER_NAME'..."
    NODES=$(find .vagrant/machines -mindepth 3 -maxdepth 3 -name "id" | \
      sed -E 's|\.vagrant/machines/||; s|/virtualbox/id||' | grep "^$CLUSTER_NAME-" | sort)

    for NODE in $NODES; do
      echo "â†’ Destroying node $NODE"
      CLUSTER_NAME=$CLUSTER_NAME vagrant destroy -f "$NODE"
    done
    ;;

  ssh)
    if [ -z "$1" ]; then
      echo "[ERROR] Usage: $0 ssh <node> or $0 ssh -n <name> <node>"
      exit 1
    fi
    if [ "$1" = "-n" ]; then
      shift
      CLUSTER_NAME="$1"
      NODE="$2"
      if [ -z "$CLUSTER_NAME" ] || [ -z "$NODE" ]; then
        echo "[ERROR] Missing cluster name or node"
        exit 1
      fi
    else
      NODE="$1"
      CLUSTER_NAME="${NODE%%-*}"
    fi
    echo "[+] Connecting to node '$NODE' (cluster: $CLUSTER_NAME)"
    CLUSTER_NAME="$CLUSTER_NAME" vagrant ssh "$NODE"
    ;;

  list)
    if [ "$1" == "all" ]; then
      find .vagrant/machines -mindepth 3 -maxdepth 3 -name "id" | \
        sed -E 's|\.vagrant/machines/||; s|/virtualbox/id||' | sort
    elif [ -n "$CLUSTER_NAME" ]; then
      find .vagrant/machines -mindepth 3 -maxdepth 3 -name "id" | \
        sed -E 's|\.vagrant/machines/||; s|/virtualbox/id||' | grep "^$CLUSTER_NAME-" | sort
    else
      find .vagrant/machines -mindepth 3 -maxdepth 3 -name "id" | \
        sed -E 's|\.vagrant/machines/||; s|/virtualbox/id||' | cut -d'-' -f1 | sort -u
    fi
    ;;

  *)
    usage
    ;;
esac
