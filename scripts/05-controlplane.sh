#!/bin/bash
set -e

# ======================================
# 05 - Nœud controlplane Kubernetes
# ======================================

# Ce script initialise le cluster Kubernetes
# Il s'exécute uniquement sur le controlplane

# Variables
K8S_VERSION="1.32"
CNI_PLUGIN=${CNI_PLUGIN:-cilium}
POD_CIDR="10.244.0.0/16"
CLUSTER_NAME=${CLUSTER_NAME:-k8s}

# Récupération de l'IP locale (exportée dans 01)
MY_IP=$(grep PRIMARY_IP /etc/environment | cut -d= -f2)

# Génération du fichier /vagrant/hosts (entête)
echo "# Hosts list generated by Vagrant" > /vagrant/hosts
echo "127.0.0.1 localhost" >> /vagrant/hosts

# Ajout de l'IP locale
echo "$MY_IP $(hostname)" >> /vagrant/hosts

# Initialisation du cluster
kubeadm init \
  --apiserver-advertise-address="$MY_IP" \
  --pod-network-cidr="$POD_CIDR" \
  --kubernetes-version="stable-${K8S_VERSION}"

# Configuration du kubelet
cat <<EOF > /etc/default/kubelet
KUBELET_EXTRA_ARGS=--node-ip=$MY_IP
EOF
systemctl daemon-reexec
systemctl restart kubelet

# Configuration de kubectl pour vagrant
mkdir -p /home/vagrant/.kube
cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
chmod 600 /home/vagrant/.kube/config
chown -R vagrant:vagrant /home/vagrant/.kube

# Copie du kubeconfig pour les workers
cp /etc/kubernetes/admin.conf /vagrant/admin.conf
chown vagrant:vagrant /vagrant/admin.conf

# Création de clés pour copie entre nodes
echo "[+] Création de clés ssh sur le controlplane"
ssh-keygen -t rsa -b 2048 -N "" -f /root/.ssh/id_rsa
chown vagrant:vagrant /root/.ssh/id_rsa
chmod 600 /root/.ssh/id_rsa
cp /root/.ssh/id_rsa.pub /vagrant/id_rsa.root.${CLUSTER_NAME}.pub
ssh-keygen -t rsa -b 2048 -N "" -f /home/vagrant/.ssh/id_rsa
chown vagrant:vagrant /home/vagrant/.ssh/id_rsa
chmod 600 /home/vagrant/.ssh/id_rsa
cp /home/vagrant/.ssh/id_rsa.pub /vagrant/id_rsa.vagrant.${CLUSTER_NAME}.pub

# Installation du CNI
if [[ "$CNI_PLUGIN" == "flannel" ]]; then
  su - vagrant -c "kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml"
elif [[ "$CNI_PLUGIN" == "cilium" ]]; then
  if ! command -v helm &> /dev/null; then
    curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  fi
  su - vagrant -c "helm repo add cilium https://helm.cilium.io/"
  su - vagrant -c "helm repo update"

  echo "[INFO] Attente que l'API Kubernetes soit disponible..."
  for i in {1..60}; do
    su - vagrant -c "kubectl get nodes &>/dev/null" && break
    sleep 2
  done

  su - vagrant -c "helm install cilium cilium/cilium \
    --namespace kube-system \
    --set kubeProxyReplacement=true \
    --set kubeProxyReplacementStrict=true \
    --set encryption.enabled=true \
    --set encryption.type=wireguard \
    --set enableL7Proxy=true \
    --set k8sServiceHost=$MY_IP \
    --set k8sServicePort=6443 \
    --set operator.replicas=1"
else
  echo "[ERREUR] CNI '$CNI_PLUGIN' inconnu."
  exit 1
fi

# Génération du script de jointure
JOIN_COMMAND=$(kubeadm token create --print-join-command)
OLD_IP=$(echo "$JOIN_COMMAND" | awk '{print $3}' | cut -d: -f1)
JOIN_COMMAND=$(echo "$JOIN_COMMAND" | sed "s/$OLD_IP/$MY_IP/")
echo "$JOIN_COMMAND" > /vagrant/join-${CLUSTER_NAME}.sh
chown vagrant:vagrant /vagrant/join-${CLUSTER_NAME}.sh
chmod +x /vagrant/join-${CLUSTER_NAME}.sh

# On supprime la taint node-role.kubernetes.io/control-plane:NoSchedule
echo "[+] Removing Taint node-role.kubernetes.io/control-plane:NoSchedule"
su - vagrant -c "kubectl taint node ${CLUSTER_NAME}-controlplane node-role.kubernetes.io/control-plane-"
